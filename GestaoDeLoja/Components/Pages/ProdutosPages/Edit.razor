@page "/produtos/edit"
@using Microsoft.EntityFrameworkCore
@using GestaoDeLoja.Data.Entities
@inject IDbContextFactory<GestaoDeLoja.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Produtos</h2>
<hr />
@if (Produtos is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Produtos" OnValidSubmit="UpdateProdutos" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Produtos.Id" value="@Produtos.Id" />
                <div class="mb-3">
                    <label for="nome" class="form-label">Nome:</label>
                    <InputText id="nome" @bind-Value="Produtos.Nome" class="form-control" />
                    <ValidationMessage For="() => Produtos.Nome" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="detalhe" class="form-label">Detalhe:</label>
                    <InputText id="detalhe" @bind-Value="Produtos.Detalhe" class="form-control" />
                    <ValidationMessage For="() => Produtos.Detalhe" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="urlimagem" class="form-label">UrlImagem:</label>
                    <InputText id="urlimagem" @bind-Value="Produtos.UrlImagem" class="form-control" />
                    <ValidationMessage For="() => Produtos.UrlImagem" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="preco" class="form-label">Preco:</label>
                    <InputNumber id="preco" @bind-Value="Produtos.Preco" class="form-control" />
                    <ValidationMessage For="() => Produtos.Preco" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="promocao" class="form-label">Promocao:</label>
                    <InputCheckbox id="promocao" @bind-Value="Produtos.Promocao" class="form-check-input" />
                    <ValidationMessage For="() => Produtos.Promocao" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="maisvendido" class="form-label">MaisVendido:</label>
                    <InputCheckbox id="maisvendido" @bind-Value="Produtos.MaisVendido" class="form-check-input" />
                    <ValidationMessage For="() => Produtos.MaisVendido" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="emstock" class="form-label">EmStock:</label>
                    <InputNumber id="emstock" @bind-Value="Produtos.EmStock" class="form-control" />
                    <ValidationMessage For="() => Produtos.EmStock" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="disponivel" class="form-label">Disponivel:</label>
                    <InputCheckbox id="disponivel" @bind-Value="Produtos.Disponivel" class="form-check-input" />
                    <ValidationMessage For="() => Produtos.Disponivel" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="origem" class="form-label">Origem:</label>
                    <InputText id="origem" @bind-Value="Produtos.Origem" class="form-control" />
                    <ValidationMessage For="() => Produtos.Origem" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="categoriaid" class="form-label">CategoriaId:</label>
                    <InputNumber id="categoriaid" @bind-Value="Produtos.CategoriaId" class="form-control" />
                    <ValidationMessage For="() => Produtos.CategoriaId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="modoentregaid" class="form-label">ModoEntregaId:</label>
                    <InputNumber id="modoentregaid" @bind-Value="Produtos.ModoEntregaId" class="form-control" />
                    <ValidationMessage For="() => Produtos.ModoEntregaId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/produtos">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Produtos? Produtos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Produtos ??= await context.Produtos.FirstOrDefaultAsync(m => m.Id == Id);

        if (Produtos is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateProdutos()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Produtos!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProdutosExists(Produtos!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/produtos");
    }

    private bool ProdutosExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Produtos.Any(e => e.Id == id);
    }
}
